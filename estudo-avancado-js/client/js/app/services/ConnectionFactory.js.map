{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["db","version","stores","connection","undefined","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","console","log","_createStores","event","target","result","onsuccess","bind","onerror","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIMA,c,GAAK,O;AACLC,mB,GAAU,C;AACVC,kB,GAAS,CAAC,aAAD,C;AAEXC,sB,GAAaC,S;AACbC,iB,GAAQD,S;;yCAECE,iB;AAET,6CAAc;AAAA;;AAEV,0BAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACH;;;;oDAEsB;;AAEnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBd,EAAtB,EAA0BC,OAA1B,CAAlB;;AAEAU,wCAAYI,eAAZ,GAA8B,iBAAS;;AAEnCC,wCAAQC,GAAR,CAAY,uCAAZ;AACAX,kDAAkBY,aAAlB,CAAgCC,MAAMC,MAAN,CAAaC,MAA7C;AACH,6BAJD;;AAMAV,wCAAYW,SAAZ,GAAwB,iBAAS;;AAE7BN,wCAAQC,GAAR,CAAY,6BAAZ;;AAEA,oCAAI,CAACd,UAAL,EAAiB;AACbA,iDAAagB,MAAMC,MAAN,CAAaC,MAA1B;;AAEAhB,4CAAQF,WAAWE,KAAX,CAAiBkB,IAAjB,CAAsBpB,UAAtB,CAAR;AACAA,+CAAWE,KAAX,GAAmB,YAAY;AAC3B,8CAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQN,UAAR;AACH,6BAbD;;AAeAQ,wCAAYa,OAAZ,GAAsB,iBAAS;;AAE3BR,wCAAQC,GAAR,CAAYE,MAAMC,MAAN,CAAaK,KAAzB;AACAf,uCAAOS,MAAMC,MAAN,CAAaK,KAAb,CAAmBC,IAA1B;AACH,6BAJD;AAKH,yBA9BM,CAAP;AA+BH;;;kDAEoBvB,U,EAAY;;AAE7BD,+BAAOyB,OAAP,CAAe,iBAAS;;AAEpB,gCAAIxB,WAAWyB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD;AAC7C3B,2CAAW4B,iBAAX,CAA6BD,KAA7B;AACH;;AAED3B,uCAAW6B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,yBAPD;AAQH;;;sDAEwB;;AAErB,4BAAI9B,UAAJ,EAAgB;AACZE;AACAF,yCAAaC,SAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["\r\n//Module Pattern\r\n// var ConnectionFactory = (function () {\r\n\r\nconst db = \"frame\";\r\nconst version = 1;\r\nconst stores = [\"negociacoes\"];\r\n\r\nlet connection = undefined;\r\nlet close = undefined;\r\n\r\nexport class ConnectionFactory {\r\n\r\n    constructor() {\r\n\r\n        throw new Error(\"Não é possível criar instâncias de ConnectionFactory.\");\r\n    }\r\n\r\n    static getConnection() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let openRequest = window.indexedDB.open(db, version);\r\n\r\n            openRequest.onupgradeneeded = event => {\r\n\r\n                console.log(\"Cria ou altera um banco já existente.\");\r\n                ConnectionFactory._createStores(event.target.result);\r\n            };\r\n\r\n            openRequest.onsuccess = event => {\r\n\r\n                console.log(\"Conexão obtida com sucesso.\");\r\n\r\n                if (!connection) {\r\n                    connection = event.target.result;\r\n\r\n                    close = connection.close.bind(connection);\r\n                    connection.close = function () {\r\n                        throw new Error(\"Você não pode fechar diretamente a conexão.\");\r\n                    }\r\n                }\r\n                resolve(connection);\r\n            };\r\n\r\n            openRequest.onerror = event => {\r\n\r\n                console.log(event.target.error);\r\n                reject(event.target.error.name);\r\n            };\r\n        });\r\n    }\r\n\r\n    static _createStores(connection) {\r\n\r\n        stores.forEach(store => {\r\n\r\n            if (connection.objectStoreNames.contains(store)) {\r\n                connection.deleteObjectStore(store);\r\n            }\r\n\r\n            connection.createObjectStore(store, { autoIncrement: true });\r\n        });\r\n    }\r\n\r\n    static closeConnection() {\r\n\r\n        if (connection) {\r\n            close();\r\n            connection = undefined;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// })();\r\n"]}