{"version":3,"sources":["../../app-es6/dao/NegociacaoDAO.js"],"names":["Negociacao","NegocicacaoDAO","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","console","log","onerror","event","target","error","name","negociacoes","openCursor","cursor","result","dado","value","push","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;;;;;;;;;;AACQA,sB,qBAAAA,U;;;;;;;;;;;;;;;;;;;;;sCAEKC,c;AAET,wCAAYC,UAAZ,EAAwB;AAAA;;AAEpB,yBAAKC,WAAL,GAAmBD,UAAnB;AACA,yBAAKE,MAAL,GAAc,aAAd;AACH;;;;8CAESC,U,EAAY;AAAA;;AAElB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,UAAU,MAAKN,WAAL,CACTO,WADS,CACG,CAAC,MAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,MAAKP,MAFR,EAGTQ,GAHS,CAGLP,UAHK,CAAd;;AAKAI,oCAAQI,SAAR,GAAoB,iBAAS;;AAEzBC,wCAAQC,GAAR,CAAY,iDAAZ;AACAR;AACH,6BAJD;;AAMAE,oCAAQO,OAAR,GAAkB,iBAAS;;AAEvBF,wCAAQC,GAAR,CAAYE,MAAMC,MAAN,CAAaC,KAAzB;AACAX,uCAAOS,MAAMC,MAAN,CAAaC,KAAb,CAAmBC,IAA1B;AACH,6BAJD;AAKH,yBAlBM,CAAP;AAmBH;;;kDAEa;AAAA;;AAEV,+BAAO,IAAId,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIa,cAAc,EAAlB;;AAEA,gCAAIC,aAAa,OAAKnB,WAAL,CACZO,WADY,CACA,OAAKN,MADL,EAEZO,WAFY,CAEA,OAAKP,MAFL,EAGZkB,UAHY,EAAjB;;AAKAA,uCAAWT,SAAX,GAAuB,UAAUI,KAAV,EAAiB;AACpC,oCAAIM,SAASN,MAAMC,MAAN,CAAaM,MAA1B;;AAEA,oCAAID,MAAJ,EAAY;;AAER,wCAAIE,OAAOF,OAAOG,KAAlB;AACAL,gDAAYM,IAAZ,CAAiB,IAAI3B,UAAJ,CAAeyB,KAAKG,KAApB,EAA2BH,KAAKI,WAAhC,EAA6CJ,KAAKK,MAAlD,CAAjB;;AAEAP,2CAAOQ,QAAP;AACH,iCAND,MAOK;;AAEDjB,4CAAQC,GAAR,CAAY,+CAAZ;AACAR,4CAAQc,WAAR;AACH;AACJ,6BAfD;;AAiBAC,uCAAWN,OAAX,GAAqB,UAAUC,KAAV,EAAiB;;AAElCH,wCAAQC,GAAR,CAAYE,MAAMC,MAAN,CAAaC,KAAzB;AACAX,uCAAOS,MAAMC,MAAN,CAAaC,KAAb,CAAmBC,IAA1B;AACH,6BAJD;AAKH,yBA/BM,CAAP;AAgCH;;;kDAEa;AAAA;;AAEV,+BAAO,IAAId,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,UAAU,OAAKN,WAAL,CACTO,WADS,CACG,CAAC,OAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,OAAKP,MAFR,EAGT4B,KAHS,EAAd;;AAKAvB,oCAAQI,SAAR,GAAoB,iBAAS;;AAEzBC,wCAAQC,GAAR,CAAY,uCAAZ;AACAR;AACH,6BAJD;;AAMAE,oCAAQO,OAAR,GAAkB,iBAAS;;AAEvBF,wCAAQC,GAAR,CAAYE,MAAMC,MAAN,CAAaC,KAAzB;AACAX,uCAAOS,MAAMC,MAAN,CAAaC,KAAb,CAAmBC,IAA1B;AACH,6BAJD;AAKH,yBAlBM,CAAP;AAmBH","file":"NegociacaoDAO.js","sourcesContent":["\r\nimport {Negociacao} from \"../models/Negociacao\";\r\n\r\nexport class NegocicacaoDAO {\r\n\r\n    constructor(connection) {\r\n\r\n        this._connection = connection;\r\n        this._store = \"negociacoes\";\r\n    }\r\n\r\n    adicionar(negociacao) {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let request = this._connection\r\n                .transaction([this._store], \"readwrite\")\r\n                .objectStore(this._store)\r\n                .add(negociacao);\r\n\r\n            request.onsuccess = event => {\r\n\r\n                console.log(\"Negociação adicionada com sucesso no banco! o//\");\r\n                resolve();\r\n            };\r\n\r\n            request.onerror = event => {\r\n\r\n                console.log(event.target.error);\r\n                reject(event.target.error.name);\r\n            };\r\n        });\r\n    }\r\n\r\n    listarTodos() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let negociacoes = [];\r\n\r\n            let openCursor = this._connection\r\n                .transaction(this._store)\r\n                .objectStore(this._store)\r\n                .openCursor();\r\n\r\n            openCursor.onsuccess = function (event) {\r\n                let cursor = event.target.result;\r\n\r\n                if (cursor) {\r\n\r\n                    let dado = cursor.value;\r\n                    negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor));\r\n\r\n                    cursor.continue();\r\n                }\r\n                else {\r\n\r\n                    console.log(\"Negociações do banco listadas com sucesso. ;)\");\r\n                    resolve(negociacoes);\r\n                }\r\n            };\r\n\r\n            openCursor.onerror = function (event) {\r\n\r\n                console.log(event.target.error);\r\n                reject(event.target.error.name);\r\n            };\r\n        });\r\n    }\r\n\r\n    apagarTodos() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let request = this._connection\r\n                .transaction([this._store], \"readwrite\")\r\n                .objectStore(this._store)\r\n                .clear();\r\n\r\n            request.onsuccess = event => {\r\n\r\n                console.log(\"Negociações removidas com sucesso. :)\");\r\n                resolve();\r\n            };\r\n\r\n            request.onerror = event => {\r\n\r\n                console.log(event.target.error);\r\n                reject(event.target.error.name);\r\n            };\r\n        });\r\n    }\r\n}"]}